package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"sync"
	"sync/atomic"
	"time"
)

type Limiter struct {
	// 用来存储信号量
	Signals chan time.Time
	// 每秒里最多的并发数
	MaxPerPeriod int
}

func NewLimiter(maxPerPeriod int) *Limiter {
	limiter := &Limiter{
		Signals:      make(chan time.Time, maxPerPeriod),
		MaxPerPeriod: maxPerPeriod,
	}
	go func() {
		for t := range time.Tick(time.Second) {
			for i := 0; i < maxPerPeriod; i++ {
				limiter.Signals <- t
			}
		}
	}()
	return limiter
}

func (l *Limiter) Allow() {
	<-l.Signals
}

func main() {
	//var body = "{\"code\":\"200\",\"message\":\"成功!\",\"result\":null}"
	//var resultBody map[string]interface{}
	//fmt.Println(string(body))
	//json.Unmarshal([]byte(body), &resultBody)
	//fmt.Println(resultBody)
	limiter := NewLimiter(40)
	totalNum := 40 * 60 * 60
	wait := sync.WaitGroup{}
	wait.Add(totalNum)
	requests := make(chan int, totalNum)
	for i := 0; i < totalNum; i++ {
		requests <- i
	}
	results := make(chan bool, totalNum)
	close(requests)
	var startTime = time.Now()
	for req := range requests {
		limiter.Allow()
		go requestFace(results, &wait)
		fmt.Println("burstyRequests", req, time.Now())
	}
	fmt.Println("发送请求总耗时：", time.Now().Sub(startTime))
	wait.Wait()
	fmt.Println("获取到结果的耗时为：", time.Now().Sub(startTime))
	close(results)
	var sum int32 = 0
	var failNum int32 = 0
	for resp := range results {
		if resp {
			atomic.AddInt32(&sum, 1)
		} else {
			atomic.AddInt32(&failNum, 1)
		}
	}
	fmt.Println("执行成功的次数为：", sum)
	fmt.Println("执行失败的次数为：", failNum)

}

func requestFace(result chan<- bool, wait *sync.WaitGroup) {
	defer wait.Done()
	m := make(map[string]string)
	m["imageBase64"] = ""
	// "appNo":"APP1712826612792"
	m["appNo"] = "APP1712826612792"
	// 将数据转换为JSON格式的字节流
	jsonData, err := json.Marshal(m)
	if err != nil {
		fmt.Println(err)
		return
	}
	resp, err := http.Post("http://120.78.161.145:8061/h5/quality", "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		fmt.Println(err)
		return
	}
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		fmt.Println(err)
		return
	}
	var resultBody map[string]interface{}
	fmt.Println(string(body))
	json.Unmarshal(body, &resultBody)
	fmt.Println(resultBody)
	if resultBody["code"] == "200" {
		result <- true
	} else {
		result <- false
	}
}
